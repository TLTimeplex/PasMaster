import { app, BrowserWindow, ipcMain, nativeTheme } from 'electron';
import * as UserControl from './system/UserControl';
import * as PasswordControl from './system/PasswordControl';
import { Database } from 'sqlite/build';
import { PMUser } from './system/User';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1600,
    height: 900,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: '#2f3241',
      symbolColor: '#74b1be',
      height: 32
    },
    minWidth: 800,
    minHeight: 600,
    center: true,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.setMenuBarVisibility(false);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// DARK MODE

ipcMain.handle('dark-mode:toggle', () => {
  if (nativeTheme.shouldUseDarkColors) {
    nativeTheme.themeSource = 'light'
  } else {
    nativeTheme.themeSource = 'dark'
  }
  return nativeTheme.shouldUseDarkColors
})

ipcMain.handle('dark-mode:system', () => {
  nativeTheme.themeSource = 'system'
})

////////////////////////////////////////////
// GLOBAL VARIABLES ////////////////////////
////////////////////////////////////////////

// User Instance
const _user = new PMUser('', '', '', false);

// User Database
let _userDB: Database | null;

const connectAndCreateIfNotExistsUserDB = async () => {
  if (_userDB) return;
  _userDB = await UserControl.connectAndCreateIfNotExistsUserDB();
}

const passwordDB: Map<string, Database> = new Map();

const connectPasswordDB = async (): Promise<Database> => {
  if (passwordDB.has(_user.uid)) return passwordDB.get(_user.uid);
  const db = await PasswordControl.connectPasswordDB(_user);
  passwordDB.set(_user.uid, db);
  return db;
}



////////////////////////////////////////////
// BACKEND IPC HANDLERS ////////////////////
////////////////////////////////////////////

// MASTER PASSWORD
ipcMain.handle('masterPassword:getAllUsers', async (): Promise<string[]> => {
  await connectAndCreateIfNotExistsUserDB();
  return await UserControl.getAllUsers(_userDB);
})

ipcMain.handle('masterPassword:createUser', async (_, username: string, password: string) => {
  await connectAndCreateIfNotExistsUserDB();
  return await UserControl.createUser(_userDB, _user, username, password);
})

ipcMain.handle('masterPassword:login', async (_, username: string, password: string) => {
  await connectAndCreateIfNotExistsUserDB();
  return await UserControl.login(_userDB, _user, username, password);
})

ipcMain.handle('masterPassword:logout', () => {
  return UserControl.logout(_user);
})

ipcMain.handle('masterPassword:info', () => {
  return {
    username: _user.username,
    password: "",
    uid: _user.uid,
    isLoggedIn: _user.isLoggedIn
  };
})

// PASSWORD ENTRIES
ipcMain.handle('passwordEntry:getIndex', async () => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.getIndex(passwordDB);
});

ipcMain.handle('passwordEntry:get', async (_, id: string) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.getEntry(passwordDB, _user, id);
});

ipcMain.handle('passwordEntry:add', async (_, entry: PasswordEntry) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.addEntry(passwordDB, _user, entry);
});

ipcMain.handle('passwordEntry:update', async (_, entry: PasswordEntry) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.updateEntry(passwordDB, _user, entry);
});

ipcMain.handle('passwordEntry:delete', async (_, id: string) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.deleteEntry(passwordDB, _user, id);
});

// CATEGORIES
ipcMain.handle('passwordEntry:addCategory', async (_, category: Category) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.addCategory(passwordDB, _user, category.titel, category.color);
});

ipcMain.handle('passwordEntry:deleteCategory', async (_, id: number) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.deleteCategory(passwordDB, _user, id);
});

ipcMain.handle('passwordEntry:updateCategory', async (_, id: number, category: Category) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.updateCategory(passwordDB, _user, id, category.titel, category.color);
});

ipcMain.handle('passwordEntry:getAllCategories', async () => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.getAllCategories(passwordDB, _user);
});

ipcMain.handle('passwordEntry:getCategory', async (_, id: number) => {
  if (!_user.isLoggedIn) throw new Error("No user logged in");
  const passwordDB = await connectPasswordDB();
  return await PasswordControl.getCategory(passwordDB, _user, id);
});